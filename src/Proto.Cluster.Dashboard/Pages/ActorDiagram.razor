@page "/ActorDiagram"
@using Proto.Remote
@using Grpc.Net.Client
@inject ActorSystem System
<h3>ActorDiagram</h3>

<MudGrid >
    <MudItem xs="6">
        @if (_root != null)
        {
            <MudTreeView ServerData="LoadServerData" Items="_root.Children" MultiSelection="false" CanHover="true" @bind-SelectedValue="SelectedValue">
                <ItemTemplate>
                    <MudTreeViewItem Icon="@Icons.Filled.Label" IconColor="Color.Success" Value="@context" LoadingIconColor="Color.Info" Text="@context.Name"/>
                </ItemTemplate>
            </MudTreeView>
        }
    </MudItem>
    <MudItem xs="6">
        Display actor details here
    </MudItem>

</MudGrid>

@code {
    private TreeNode? _root;
    TreeNode? SelectedValue { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var members = System.Cluster().MemberList.GetAllMembers();

        var pids = new List<PID>();
        foreach (var member in members)
        {
            var client = GetClient(member);
            var res = await client.ListProcessesAsync(new ListProcessesRequest
            {
                Pattern = ""
            });
            pids.AddRange(res.Pids);
        }

        var root = new TreeNode();
        foreach (var pid in pids)
        {
            var treeNode = root.GetChildFor(pid);
        }
        _root = root;
        await InvokeAsync(StateHasChanged);
    }

    private Remoting.RemotingClient GetClient(Member member)
    {
        var channel = GrpcChannel.ForAddress("http://" + member.Address);
        var client = new Remoting.RemotingClient(channel);
        return client;
    }

    private Task<HashSet<TreeNode>> LoadServerData(TreeNode parentNode) =>
        Task.FromResult(parentNode.Children);

}