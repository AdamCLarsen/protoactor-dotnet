@page "/ActorDiagram"
@using Proto.Remote
@using Grpc.Net.Client
@using Proto.Cluster.Dashboard.Shared
@inject ActorSystem System
@inject DashboardSettings Settings
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime;
<div class="pa-4">
    @if (_root != null)
    {
        <MudPaper Elevation="2">
            <MudTreeView
                Height="300px"
                MaxHeight="300px"
                ServerData="LoadServerData"
                Items="_root.Children"
                MultiSelection="false"
                CanHover="true"
                SelectedValueChanged="(TreeNode node) => SelectedValueChanged(node)">
                <ItemTemplate>
                    <MudTreeViewItem
                        Icon="@Icons.Filled.Label"
                        IconColor="Color.Success"
                        Value="@context"
                        LoadingIconColor="Color.Info"
                        Text="@context.Name"/>
                </ItemTemplate>
            </MudTreeView>
        </MudPaper>
    }

    @if (_selected?.Pid != null)
    {
        @if (Settings != null)
        {
            <MudPaper Elevation="2" class="mt-2 pa-4">
                <MudButton Color="Color.Info" StartIcon="@Icons.Filled.TableRows" Variant="Variant.Filled" OnClick="OpenLogs">Logs for this actor</MudButton>
                <MudButton Color="Color.Info" StartIcon="@Icons.Filled.AccountTree" Variant="Variant.Filled" OnClick="OpenTraces">Traces for this actor</MudButton>
            </MudPaper>
        }
        <ActorDiagnosticsWidget PidId="@_selected.Pid.Id" Diagnostics="@_diagnostics"/>
    }
</div>

@code {
    private TreeNode? _root;
    private TreeNode? _selected;
    private string? _diagnostics;

    private void SelectedValueChanged(TreeNode? x)
    {
        if (x?.Pid == null)
        {
            return;
        }

        _selected = x;
        _ = GetDiagnostics(x.Pid);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var members = System.Cluster().MemberList.GetAllMembers();

        var pids = new List<PID>();
        foreach (var member in members)
        {
            var client = GetClient(member.Address);
            var res = await client.ListProcessesAsync(new ListProcessesRequest
            {
                Pattern = ""
            });
            pids.AddRange(res.Pids);
        }

        var root = new TreeNode();
        foreach (var pid in pids)
        {
            var treeNode = root.GetChildFor(pid);
        }
        _root = root;
        await InvokeAsync(StateHasChanged);
    }

    private Remoting.RemotingClient GetClient(string address)
    {
        var channel = GrpcChannel.ForAddress($"http://{address}");
        var client = new Remoting.RemotingClient(channel);
        return client;
    }

    private async Task GetDiagnostics(PID pid)
    {
        _diagnostics = "";
        var client = GetClient(pid.Address);
        var res = await client.GetProcessDiagnosticsAsync(new GetProcessDiagnosticsRequest
        {
            Pid = pid
        });
        Console.WriteLine(res.DiagnosticsString);
        _diagnostics = res.DiagnosticsString;
        StateHasChanged();
    }

    private Task<HashSet<TreeNode>> LoadServerData(TreeNode parentNode) =>
        Task.FromResult(parentNode.Children);

    private async Task OpenLogs()
    {
        if (_selected?.Pid == null) return;
        
        var pidStr = _selected.Pid.ToString();
        var url = Settings.LogSearchPattern!.Replace("%PID%", pidStr);
        await JSRuntime.InvokeAsync<object>("open",  new object[]{ url, "_blank"});
    }

    private async Task OpenTraces()
    {
        if (_selected?.Pid == null) return;
        
        var pidStr = _selected.Pid.ToString();
        var url = Settings.LogSearchPattern!.Replace("%PID%", pidStr);
        await JSRuntime.InvokeAsync<object>("open",  new object[]{ url, "_blank"});
    }
}